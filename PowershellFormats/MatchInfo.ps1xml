<?xml version="1.0" encoding="utf-8" ?>
<Configuration>
  <ViewDefinitions>
    <View>
      <Name>HighlightedMatchInfo</Name>
      <ViewSelectedBy>
        <TypeName>Microsoft.PowerShell.Commands.MatchInfo</TypeName>
      </ViewSelectedBy>
      <GroupBy>
        <PropertyName>Path</PropertyName>
        <Label>Path</Label>
      </GroupBy>
      <TableControl>
        <TableHeaders>

          <TableColumnHeader>
            <Label>LineNumber</Label>
            <Width>10</Width>
            <Alignment>Right</Alignment>
          </TableColumnHeader>

          <TableColumnHeader>
            <Label>Line</Label>
            <Alignment>left</Alignment>
          </TableColumnHeader>

        </TableHeaders>
        <TableRowEntries>
          <TableRowEntry>
            <Wrap/>
            <TableColumnItems>

              <TableColumnItem>
                <ScriptBlock>
                  if ($_.Context)
                  {
                      return ""
                  }
                  return $_.LineNumber
                </ScriptBlock>
              </TableColumnItem>

              <TableColumnItem>
                <ScriptBlock>
                  $Line=$_.Line
                  if ($host.UI.SupportsVirtualTerminal)
                  {
                      $HighLightColor = "$([char]27)[92m"
                      $ResetColor     = "$([char]27)[0m"

                      #Regex match
                      if ($_.Matches)
                      {
                          $AddedCharCount=0
                          foreach ($Item in $_.Matches)
                          {
                              $Line=$Line.Insert($Item.Index+$AddedCharCount,$HighLightColor).Insert($Item.Index+$AddedCharCount+$HighLightColor.Length+$Item.Length,$ResetColor)
                              $AddedCharCount+=$HighLightColor.Length+$ResetColor.Length
                          }
                      }
                      #Simple match
                      else
                      {
                          $Culture=[System.StringComparison]::CurrentCulture
                          if ($_.IgnoreCase)
                          {
                              $Culture=[System.StringComparison]::CurrentCultureIgnoreCase
                          }
                          $InsertIndex=0
                          do
                          {
                              $InsertIndex=$Line.IndexOf($_.Pattern,$InsertIndex,$Culture)
                              if ($InsertIndex -ne -1)
                              {
                                  $Line=$Line.Insert($InsertIndex,$HighLightColor).Insert($InsertIndex+$HighLightColor.Length+$_.Pattern.Length,$ResetColor)
                                  $InsertIndex+=$HighLightColor.Length+$ResetColor.Length+1
                              }
                          }
                          until ($InsertIndex -eq -1)
                      }
                  }
                  $Result=$Line
                  if ($_.Context.PreContext)
                  {
                      $i=$_.LineNumber-$_.Context.PreContext.Count
                      $PreContextLines=foreach ($Item in $_.Context.PreContext)
                      {
                          "$i`: $Item"
                          $i++
                      }
                      $Result=[string]::Join("`n",$PreContextLines) + "`n$($_.LineNumber): $Line"
                  }
                  if ($_.Context.PostContext)
                  {
                      $i=$_.LineNumber+1
                      $PostContextLines=foreach ($Item in $_.Context.PostContext)
                      {
                          "$i`: $Item"
                          $i++
                      }
                      $Result="$Result`n" + [string]::Join("`n",$PostContextLines)
                  }
                  return $Result
                </ScriptBlock>
              </TableColumnItem>

            </TableColumnItems>
          </TableRowEntry>
        </TableRowEntries>
      </TableControl>
    </View>
  </ViewDefinitions>
</Configuration>